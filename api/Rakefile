# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require File.expand_path('../config/application', __FILE__)

Rails.application.load_tasks

require 'csv'
namespace :db do
  namespace :schema do
    task :load => :environment do
      ActiveRecord::Base.connection.execute('TRUNCATE epa_records RESTART IDENTITY')

      files = []
      file1 = "#{Rails.root}/dbdata/epa_records_2013.txt"
      file2 = "#{Rails.root}/dbdata/epa_records_2014.txt"

      file1 = '/usr/src/app/dbdata/epa_records_2013.txt' unless File.exists? file1
      file2 = '/usr/src/app/dbdata/epa_records_2014.txt' unless File.exists? file2

      files << file1
      files << file2

      if Rails.env.production?
        file3 = "#{Rails.root}/dbdata/epa_records_remaining1.txt"
        file4 = "#{Rails.root}/dbdata/epa_records_remaining2.txt"
        file5 = "#{Rails.root}/dbdata/epa_records_remaining3.txt"
        file6 = "#{Rails.root}/dbdata/epa_records_remaining4.txt"
        file7 = "#{Rails.root}/dbdata/epa_records_remaining5.txt"
        file8 = "#{Rails.root}/dbdata/epa_records_remaining6.txt"
        file9 = "#{Rails.root}/dbdata/epa_records_remaining7.txt"
        file10 = "#{Rails.root}/dbdata/epa_records_remaining8.txt"
        file11 = "#{Rails.root}/dbdata/epa_records_remaining9.txt"

        file3 = '/usr/src/app/dbdata/epa_records_remaining1.txt' unless File.exists? file3
        file4 = '/usr/src/app/dbdata/epa_records_remaining2.txt' unless File.exists? file4
        file5 = '/usr/src/app/dbdata/epa_records_remaining3.txt' unless File.exists? file5
        file6 = '/usr/src/app/dbdata/epa_records_remaining4.txt' unless File.exists? file6
        file7 = '/usr/src/app/dbdata/epa_records_remaining5.txt' unless File.exists? file7
        file8 = '/usr/src/app/dbdata/epa_records_remaining6.txt' unless File.exists? file8
        file9 = '/usr/src/app/dbdata/epa_records_remaining7.txt' unless File.exists? file9
        file10 = '/usr/src/app/dbdata/epa_records_remaining8.txt' unless File.exists? file10
        file11 = '/usr/src/app/dbdata/epa_records_remaining9.txt' unless File.exists? file11


        files << file3
        files << file4
        files << file5
        files << file6
        files << file7
        files << file8
        files << file9
        files << file10
        files << file11
      end

      def copy_sql(file)
        sql = <<-SQL
        COPY epa_records
        (
          old_id, cas_number, reporting_year, trifid, facility_name, facility_city, facility_county, facility_state,
          facility_zip_code, primary_naics_code, latitude, longitude, parent_company_name, chemical_name,
          classification, unit_of_measure, produce_the_chemical, import_the_chemical, on_site_use, sale_or_distribution,
          as_a_byproduct, as_a_manufactured_impurity, as_a_reactant, as_a_formulation_component,
          as_an_article_component, repackaging, as_a_process_impurity, as_a_chemical_processing_aid,
          as_a_manufacturing_aid, ancillary_or_other_use, total_air_emissions, total_underground_injection,
          total_on_site_land_releases, total_transferred_off_site_to_disposal, document_control_number,
          total_surface_water_discharge, transfers_to_potws_metals_and_metal_compounds, naics_2, naics_3, chemical,
          cercla_chemicals, haps, metals_and_metal_compounds, pbt_chemicals, priority_chemicals, osha_chemicals,
          other_health_effects, body_weight, cardiovascular, dermal, developmental, endocrine, gastrointestinal,
          hematological, hepatic, immunological, metabolic, musculoskeletal, neurological, ocular, other_systemic,
          renal, reproductive, respiratory, human_health_effects_information_not_identified, acute, intermediate,
          chronic
        ) FROM '#{file}'
        SQL

        ActiveRecord::Base.connection.execute(sql)
      end

      puts 'Copying EPA data...'
      files.each do |file|
        copy_sql(file)
      end
      puts 'EPA data copied successfully!'
    end
  end
end