# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require File.expand_path('../config/application', __FILE__)

Rails.application.load_tasks

require 'csv'
namespace :db do
  namespace :schema do
    task :load => :environment do
      ActiveRecord::Base.connection.execute('TRUNCATE epa_data RESTART IDENTITY')

      files = []
      file1 = "#{Rails.root}/dbdata/epa_records_2013.txt"
      file2 = "#{Rails.root}/dbdata/epa_records_2014.txt"

      file1 = '/usr/src/app//dbdata/epa_records_2013.txt' unless File.exists? file1
      file2 = '/usr/src/app//dbdata/epa_records_2014.txt' unless File.exists? file2

      files << file1
      files << file2

      if Rails.env.production?
        file3 = "#{Rails.root}/dbdata/epa_records1.txt"
        file4 = "#{Rails.root}/dbdata/epa_records2.txt"

        file3 = '/usr/src/app//dbdata/epa_records1.txt' unless File.exists? file3
        file4 = '/usr/src/app//dbdata/epa_records2.txt' unless File.exists? file4

        files << file3
        files << file4
      end

      def copy_sql(file)
        sql = <<-SQL
        COPY epa_data
        (
          old_id, cas_number, reporting_year, trifid, facility_name, facility_city, facility_county, facility_state,
          facility_zip_code, primary_naics_code, latitude, longitude, parent_company_name, chemical_name,
          classification, unit_of_measure, produce_the_chemical, import_the_chemical, on_site_use, sale_or_distribution,
          as_a_byproduct, as_a_manufactured_impurity, as_a_reactant, as_a_formulation_component,
          as_an_article_component, repackaging, as_a_process_impurity, as_a_chemical_processing_aid,
          as_a_manufacturing_aid, ancillary_or_other_use, total_air_emissions, total_underground_injection,
          total_on_site_land_releases, total_transferred_off_site_to_disposal, document_control_number,
          total_surface_water_discharge, transfers_to_potws_metals_and_metal_compounds, naics_2, naics_3, chemical,
          cercla_chemicals, haps, metals_and_metal_compounds, pbt_chemicals, priority_chemicals, osha_chemicals,
          other_health_effects, body_weight, cardiovascular, dermal, developmental, endocrine, gastrointestinal,
          hematological, hepatic, immunological, metabolic, musculoskeletal, neurological, ocular, other_systemic,
          renal, reproductive, respiratory, human_health_effects_information_not_identified, acute, intermediate,
          chronic
        ) FROM '#{file}'
        SQL

        ActiveRecord::Base.connection.execute(sql)
      end

      puts 'Copying EPA data...'
      files.each do |file|
        copy_sql(file)
      end
      puts 'EPA data copied successfully!'

      # ACCEPTS A MAX ROW COUNT SPECIFIED AS 'rake db:load count=n'
      # max_rows = -1
      # max_rows =  ARGV[1].split('=')[1].to_i unless ARGV[1].nil?
      # EpaRecord.destroy_all
      # p "Starting to read file at #{Time.now.getutc}"
      # file = '../api/dbdata/simple_data.csv'
      # file = '/usr/src/app/dbdata/simple_data.csv' unless File.exists? file
      # csv_text = File.read(file).encode!('UTF-8', 'iso-8859-1', invalid: :replace)
      # csv = CSV.parse(csv_text, :headers => true)
      # p "Finished reading file at #{Time.now.getutc}"
      # row_count = 0
      # p "Creating records at #{Time.now.getutc}"
      # # TODO: WE CAN INSERT THESE IN BATCHES TO MOVE MORE QUICKLY
      # csv.each do |row|
      #   EpaRecord.create!(row.to_hash)
      #   row_count += 1
      #   break if (row_count == max_rows)
      # end
      # p "Finished creating #{row_count} records at #{Time.now.getutc}"
    end
  end
end