# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require File.expand_path('../config/application', __FILE__)

Rails.application.load_tasks

namespace :db do
  namespace :schema do
    task :load => :environment do
      if ActiveRecord::Base.connection.table_exists? 'epa_records'
        ActiveRecord::Base.connection.execute('TRUNCATE epa_records RESTART IDENTITY')

        file1 = "#{Rails.root}/dbdata/epa_records1.txt"
        file2 = "#{Rails.root}/dbdata/epa_records2.txt"

        ActiveRecord::Base.connection.execute("COPY epa_records (id, cas_number, reporting_year, trifid, facility_name, facility_city, facility_county, facility_state, facility_zip_code, primary_naics_code, latitude, longitude, parent_company_name, chemical_name, classification, unit_of_measure, produce_the_chemical, import_the_chemical, on_site_use, sale_or_distribution, as_a_byproduct, as_a_manufactured_impurity, as_a_reactant, as_a_formulation_component, as_an_article_component, repackaging, as_a_process_impurity, as_a_chemical_processing_aid, as_a_manufacturing_aid, ancillary_or_other_use, total_air_emissions, total_underground_injection, total_on_site_land_releases, total_transferred_off_site_to_disposal, document_control_number, total_surface_water_discharge, transfers_to_potws_metals_and_metal_compounds, naics_2, naics_3, chemical, cercla_chemicals, haps, metals_and_metal_compounds, pbt_chemicals, priority_chemicals, osha_chemicals, other_health_effects, body_weight, cardiovascular, dermal, developmental, endocrine, gastrointestinal, hematological, hepatic, immunological, metabolic, musculoskeletal, neurological, ocular, other_systemic, renal, reproductive, respiratory, human_health_effects_information_not_identified, acute, intermediate, chronic) FROM '#{file1}';") if File.exists? file1
        ActiveRecord::Base.connection.execute("COPY epa_records (id, cas_number, reporting_year, trifid, facility_name, facility_city, facility_county, facility_state, facility_zip_code, primary_naics_code, latitude, longitude, parent_company_name, chemical_name, classification, unit_of_measure, produce_the_chemical, import_the_chemical, on_site_use, sale_or_distribution, as_a_byproduct, as_a_manufactured_impurity, as_a_reactant, as_a_formulation_component, as_an_article_component, repackaging, as_a_process_impurity, as_a_chemical_processing_aid, as_a_manufacturing_aid, ancillary_or_other_use, total_air_emissions, total_underground_injection, total_on_site_land_releases, total_transferred_off_site_to_disposal, document_control_number, total_surface_water_discharge, transfers_to_potws_metals_and_metal_compounds, naics_2, naics_3, chemical, cercla_chemicals, haps, metals_and_metal_compounds, pbt_chemicals, priority_chemicals, osha_chemicals, other_health_effects, body_weight, cardiovascular, dermal, developmental, endocrine, gastrointestinal, hematological, hepatic, immunological, metabolic, musculoskeletal, neurological, ocular, other_systemic, renal, reproductive, respiratory, human_health_effects_information_not_identified, acute, intermediate, chronic) FROM '#{file2}';") if File.exists? file2

        states = "#{Rails.root}/dbdata/states.txt"

        ActiveRecord::Base.connection.execute("COPY states (state_num_code, state_name, abbreviation) FROM '#{states}';") if File.exists? states

        counties = "#{Rails.root}/dbdata/counties.txt"

        ActiveRecord::Base.connection.execute("COPY counties (county_num_code, state_num_code, county_name, coordinates) FROM '#{counties}';") if File.exists? counties

        geo_json = "#{Rails.root}/dbdata/geo_json.txt"

        ActiveRecord::Base.connection.execute("COPY geo_json (state_num_code, county_num_code, geo_object) FROM '#{geo_json}';") if File.exists? geo_json

        ActiveRecord::Base.connection.execute('UPDATE counties t0 SET geo_json_id = t1.id FROM (SELECT id, state_num_code, county_num_code FROM geo_json) AS t1 WHERE t0.state_num_code = t1.state_num_code AND t0.county_num_code = t1.county_num_code')
        ActiveRecord::Base.connection.execute('CREATE EXTENSION unaccent')
        ActiveRecord::Base.connection.execute('UPDATE epa_records SET state_num_code = t1.state_num_code FROM (SELECT state_num_code, abbreviation FROM states) AS t1 WHERE facility_state = t1.abbreviation')
        ActiveRecord::Base.connection.execute("UPDATE epa_records SET facility_county = 'MIAMI-DADE' WHERE facility_county = 'DADE' AND state_num_code = 12")
        ActiveRecord::Base.connection.execute("UPDATE epa_records t0
                                                SET county_num_code = t1.county_num_code
                                                FROM (
                                                  SELECT county_num_code, state_num_code, county_name
                                                  FROM counties
                                                ) AS t1
                                                WHERE
                                                  replace(replace(facility_county, ' ', ''), '(CITY)', '') = unaccent(replace(replace(replace(UPPER(t1.county_name), ' ', ''), '.', ''), '''', '')) AND t0.state_num_code = t1.state_num_code")
        ActiveRecord::Base.connection.execute('UPDATE epa_records t0 SET geo_json_id = t1.id FROM (SELECT id, state_num_code, county_num_code FROM geo_json) AS t1 WHERE t0.state_num_code = t1.state_num_code AND t0.county_num_code = t1.county_num_code')
      end
    end
  end
end